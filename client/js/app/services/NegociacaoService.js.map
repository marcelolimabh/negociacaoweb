{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","listaTodos","negociacao","adiciona","apagaTodos"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return new Promise((resolve, reject) => {\n\n           \n            this._http.get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana do servidor.');\n                });\n        });\n    }\n\n\n    obterNegociacoesDaSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n\n          \n            this._http.get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior do servidor.');\n                });\n        });\n    }\n\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n\n         \n            this._http.get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada do servidor.');\n                });\n        });\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações')\n            });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnection().then((connection) => {\n\n            let dao = new NegociacaoDAO(connection);\n            dao.adiciona(negociacao)\n                .then(() => \"Negociação adicionada com sucesso!!\");\n\n        }).catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possivel adicionar a Negociação!');\n        });\n\n    }\n\n\n    apaga() {\n       return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => \"Negociações excluidas com sucesso!\")\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n}\n"]}
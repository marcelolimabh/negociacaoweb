{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","console","log","es","statusText","Error","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;;;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;sCAIeC,G,EAAI;AACd,gBAAG,CAACA,IAAIC,EAAR,EAAY;;AAETC,wBAAQC,GAAR,CAAYC,GAAGC,UAAf;AACA,sBAAM,IAAIC,KAAJ,CAAUN,IAAIK,UAAd,CAAN;AACF;AACD,mBAAOL,GAAP;AACH;;;4BAEGO,G,EAAI;AAAA;;AAEN,mBAAOC,MAAMD,GAAN,EACLE,IADK,CACA;AAAA,uBAAO,MAAKC,aAAL,CAAmBV,GAAnB,CAAP;AAAA,aADA,EAELS,IAFK,CAEA;AAAA,uBAAOT,IAAIW,IAAJ,EAAP;AAAA,aAFA,CAAP;AAGD;;;6BAEIJ,G,EAAKK,I,EAAK;AAAA;;AAEZ,mBAAOJ,MAAMD,GAAN,EAAW;AACdM,yBAAS,EAAE,gBAAgB,kBAAlB,EADK;AAEdC,wBAAQ,MAFM;AAGdC,sBAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,aAAX,EAKNH,IALM,CAKD;AAAA,uBAAO,OAAKC,aAAL,CAAmBV,GAAnB,CAAP;AAAA,aALC,CAAP;AAMF","file":"HttpService.js","sourcesContent":["class HttpService{\n\n    /*\n    Implementação com requisicao ajax\n\n    get(url){\n         \n\n        return new Promise((resolve, reject) => {\n\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET', url);\n            xhr.onreadystatechange = () => {\n                if(xhr.readyState == 4) {\n                    if(xhr.status == 200) {\n                        resolve(JSON.parse(xhr.responseText));\n                    } else {\n                        console.log(xhr.responseText);\n                        reject(xhr.responseText);\n                    }\n                }\n            }\n\n            xhr.send();\n        });\n    }\n\n    post(url, dado){\n        return new Promise((resolve, reject) =>{\n            let  xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.setRequestHeader('Content-type', 'application/json');\n            xhr.onreadystatechange = ()=>{\n                if(xhr.readyState==4){\n                    if(xhr.status==200){\n                        resolve(JSON.parse(xhr.responseText));\n                    }else{\n                        reject(xhr.responseText);\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(dado));\n        });\n    }\n    */\n\n    /**\n     * Nova implementacao com ES2016 utilizado fetch\n     */\n\n     _handleErrors(res){\n         if(!res.ok) {\n\n            console.log(es.statusText);\n            throw new Error(res.statusText);\n         }\n         return res;   \n     }\n\n     get(url){\n\n       return fetch(url)\n        .then(res => this._handleErrors(res))\n        .then(res => res.json());\n     }\n\n     post(url, dado){\n\n        return fetch(url, {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'post',\n            body: JSON.stringify(dado)\n        })\n        .then(res => this._handleErrors(res));\n     }\n\n\n\n}"]}